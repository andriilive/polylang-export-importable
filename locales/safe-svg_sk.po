msgid ""
msgstr ""
"X-Domain: safe-svg\n"

msgid "String"
msgstr "String"

msgid "Sorry, this file couldn't be sanitized so for security reasons wasn't uploaded"
msgstr "Sorry, this file couldn't be sanitized so for security reasons wasn't uploaded"

msgid ""
"Full Size' ),\n"
"                    'thumbnail' => __( 'Thumbnail' ),\n"
"                    'medium'    => __( 'Medium' ),\n"
"                    'large'     => __( 'Large' ),\n"
"                ) );\n"
"\n"
"                $sizes = array();\n"
"\n"
"                foreach ( $possible_sizes as $size => $label ) {\n"
"                    $default_height = 2000;\n"
"                    $default_width  = 2000;\n"
"\n"
"                    if ( 'full' === $size && $dimensions ) {\n"
"                        $default_height = $dimensions['height'];\n"
"                        $default_width  = $dimensions['width'];\n"
"                    }\n"
"\n"
"                    $sizes[ $size ] = array(\n"
"                        'height'      => get_option( \"{$size}_size_w\", $default_height ),\n"
"                        'width'       => get_option( \"{$size}_size_h\", $default_width ),\n"
"                        'url'         => $response['url'],\n"
"                        'orientation' => 'portrait',\n"
"                    );\n"
"                }\n"
"\n"
"                $response['sizes'] = $sizes;\n"
"                $response['icon']  = $response['url'];\n"
"            }\n"
"\n"
"            return $response;\n"
"        }\n"
"\n"
"        /**\n"
"         * Filters the image src result.\n"
"         * Here we're gonna spoof the image size and set it to 100 width and height\n"
"         *\n"
"         * @param array|false $image Either array with src, width & height, icon src, or false.\n"
"         * @param int $attachment_id Image attachment ID.\n"
"         * @param string|array $size Size of image. Image size or array of width and height values\n"
"         *                                    (in that order). Default 'thumbnail'.\n"
"         * @param bool $icon Whether the image should be treated as an icon. Default false.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function one_pixel_fix( $image, $attachment_id, $size, $icon ) {\n"
"            if ( get_post_mime_type( $attachment_id ) == 'image/svg+xml' ) {\n"
"                $image['1'] = false;\n"
"                $image['2'] = false;\n"
"            }\n"
"\n"
"            return $image;\n"
"        }\n"
"\n"
"        /**\n"
"         * If the featured image is an SVG we wrap it in an SVG class so we can apply our CSS fix.\n"
"         *\n"
"         * @param string $content Admin post thumbnail HTML markup.\n"
"         * @param int $post_id Post ID.\n"
"         * @param int $thumbnail_id Thumbnail ID.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function featured_image_fix( $content, $post_id, $thumbnail_id ) {\n"
"            $mime = get_post_mime_type( $thumbnail_id );\n"
"\n"
"            if ( 'image/svg+xml' === $mime ) {\n"
"                $content = sprintf( '<span class=\"svg\">%s</span>', $content );\n"
"            }\n"
"\n"
"            return $content;\n"
"        }\n"
"\n"
"        /**\n"
"         * Load our custom CSS sheet.\n"
"         */\n"
"        function load_custom_admin_style() {\n"
"            wp_enqueue_style( 'safe-svg-css', plugins_url( 'assets/safe-svg.css', __FILE__ ), array() );\n"
"        }\n"
"\n"
"        /**\n"
"         * Override the default height and width string on an SVG\n"
"         *\n"
"         * @param string $html HTML content for the image.\n"
"         * @param int $id Attachment ID.\n"
"         * @param string $alt Alternate text.\n"
"         * @param string $title Attachment title.\n"
"         * @param string $align Part of the class name for aligning the image.\n"
"         * @param string|array $size Size of image. Image size or array of width and height values (in that order).\n"
"         *                            Default 'medium'.\n"
"         *\n"
"         * @return mixed\n"
"         */\n"
"        function get_image_tag_override( $html, $id, $alt, $title, $align, $size ) {\n"
"            $mime = get_post_mime_type( $id );\n"
"\n"
"            if ( 'image/svg+xml' === $mime ) {\n"
"                if ( is_array( $size ) ) {\n"
"                    $width  = $size[0];\n"
"                    $height = $size[1];\n"
"                } elseif ( 'full' == $size && $dimensions = $this->svg_dimensions( get_attached_file( $id ) ) ) {\n"
"                    $width  = $dimensions['width'];\n"
"                    $height = $dimensions['height'];\n"
"                } else {\n"
"                    $width  = get_option( \"{$size}_size_w\", false );\n"
"                    $height = get_option( \"{$size}_size_h\", false );\n"
"                }\n"
"\n"
"                if ( $height && $width ) {\n"
"                    $html = str_replace( 'width=\"1\" ', sprintf( 'width=\"%s\" ', $width ), $html );\n"
"                    $html = str_replace( 'height=\"1\" ', sprintf( 'height=\"%s\" ', $height ), $html );\n"
"                } else {\n"
"                    $html = str_replace( 'width=\"1\" "
msgstr ""
"Full Size' ),\n"
"                    'thumbnail' => __( 'Thumbnail' ),\n"
"                    'medium'    => __( 'Medium' ),\n"
"                    'large'     => __( 'Large' ),\n"
"                ) );\n"
"\n"
"                $sizes = array();\n"
"\n"
"                foreach ( $possible_sizes as $size => $label ) {\n"
"                    $default_height = 2000;\n"
"                    $default_width  = 2000;\n"
"\n"
"                    if ( 'full' === $size && $dimensions ) {\n"
"                        $default_height = $dimensions['height'];\n"
"                        $default_width  = $dimensions['width'];\n"
"                    }\n"
"\n"
"                    $sizes[ $size ] = array(\n"
"                        'height'      => get_option( \"{$size}_size_w\", $default_height ),\n"
"                        'width'       => get_option( \"{$size}_size_h\", $default_width ),\n"
"                        'url'         => $response['url'],\n"
"                        'orientation' => 'portrait',\n"
"                    );\n"
"                }\n"
"\n"
"                $response['sizes'] = $sizes;\n"
"                $response['icon']  = $response['url'];\n"
"            }\n"
"\n"
"            return $response;\n"
"        }\n"
"\n"
"        /**\n"
"         * Filters the image src result.\n"
"         * Here we're gonna spoof the image size and set it to 100 width and height\n"
"         *\n"
"         * @param array|false $image Either array with src, width & height, icon src, or false.\n"
"         * @param int $attachment_id Image attachment ID.\n"
"         * @param string|array $size Size of image. Image size or array of width and height values\n"
"         *                                    (in that order). Default 'thumbnail'.\n"
"         * @param bool $icon Whether the image should be treated as an icon. Default false.\n"
"         *\n"
"         * @return array\n"
"         */\n"
"        public function one_pixel_fix( $image, $attachment_id, $size, $icon ) {\n"
"            if ( get_post_mime_type( $attachment_id ) == 'image/svg+xml' ) {\n"
"                $image['1'] = false;\n"
"                $image['2'] = false;\n"
"            }\n"
"\n"
"            return $image;\n"
"        }\n"
"\n"
"        /**\n"
"         * If the featured image is an SVG we wrap it in an SVG class so we can apply our CSS fix.\n"
"         *\n"
"         * @param string $content Admin post thumbnail HTML markup.\n"
"         * @param int $post_id Post ID.\n"
"         * @param int $thumbnail_id Thumbnail ID.\n"
"         *\n"
"         * @return string\n"
"         */\n"
"        public function featured_image_fix( $content, $post_id, $thumbnail_id ) {\n"
"            $mime = get_post_mime_type( $thumbnail_id );\n"
"\n"
"            if ( 'image/svg+xml' === $mime ) {\n"
"                $content = sprintf( '<span class=\"svg\">%s</span>', $content );\n"
"            }\n"
"\n"
"            return $content;\n"
"        }\n"
"\n"
"        /**\n"
"         * Load our custom CSS sheet.\n"
"         */\n"
"        function load_custom_admin_style() {\n"
"            wp_enqueue_style( 'safe-svg-css', plugins_url( 'assets/safe-svg.css', __FILE__ ), array() );\n"
"        }\n"
"\n"
"        /**\n"
"         * Override the default height and width string on an SVG\n"
"         *\n"
"         * @param string $html HTML content for the image.\n"
"         * @param int $id Attachment ID.\n"
"         * @param string $alt Alternate text.\n"
"         * @param string $title Attachment title.\n"
"         * @param string $align Part of the class name for aligning the image.\n"
"         * @param string|array $size Size of image. Image size or array of width and height values (in that order).\n"
"         *                            Default 'medium'.\n"
"         *\n"
"         * @return mixed\n"
"         */\n"
"        function get_image_tag_override( $html, $id, $alt, $title, $align, $size ) {\n"
"            $mime = get_post_mime_type( $id );\n"
"\n"
"            if ( 'image/svg+xml' === $mime ) {\n"
"                if ( is_array( $size ) ) {\n"
"                    $width  = $size[0];\n"
"                    $height = $size[1];\n"
"                } elseif ( 'full' == $size && $dimensions = $this->svg_dimensions( get_attached_file( $id ) ) ) {\n"
"                    $width  = $dimensions['width'];\n"
"                    $height = $dimensions['height'];\n"
"                } else {\n"
"                    $width  = get_option( \"{$size}_size_w\", false );\n"
"                    $height = get_option( \"{$size}_size_h\", false );\n"
"                }\n"
"\n"
"                if ( $height && $width ) {\n"
"                    $html = str_replace( 'width=\"1\" ', sprintf( 'width=\"%s\" ', $width ), $html );\n"
"                    $html = str_replace( 'height=\"1\" ', sprintf( 'height=\"%s\" ', $height ), $html );\n"
"                } else {\n"
"                    $html = str_replace( 'width=\"1\" "
